from datetime import datetime
from fastapi import Depends, HTTPException, status, APIRouter, Response
from pymongo.collection import ReturnDocument
from app import schemas
from app.database import Report
from app.oauth2 import require_user
from app.serializers.reportSerializers import reportEntity, reportListEntity
from bson.objectid import ObjectId

router = APIRouter()


@router.get('/')
def get_reports(limit: int = 10, page: int = 1, search: str = '', user_id: str = Depends(require_user)):
    skip = (page - 1) * limit
    pipeline = [
        {'$match': {}},
        {'$lookup': {'from': 'users', 'localField': 'user',
                     'foreignField': '_id', 'as': 'user'}},
        {'$unwind': '$user'},
        {
            '$skip': skip
        }, {
            '$limit': limit
        }
    ]
    reports = reportListEntity(Report.aggregate(pipeline))
    return {'status': 'success', 'results': len(reports), 'reports': reports}


@router.post('/', status_code=status.HTTP_201_CREATED)
def create_report(report: schemas.CreateReportSchema, user_id: str = Depends(require_user)):
    report.user = ObjectId(user_id)
    report.created_at = datetime.utcnow()
    report.updated_at = report.created_at
    result = Report.insert_one(report.dict())
    pipeline = [
        {'$match': {'_id': result.inserted_id}},
        {'$lookup': {'from': 'users', 'localField': 'user',
                     'foreignField': '_id', 'as': 'user'}},
        {'$unwind': '$user'},
    ]
    new_report = reportListEntity(Report.aggregate(pipeline))[0]
    return new_report


@router.put('/{id}')
def update_report(id: str, payload: schemas.UpdateReportSchema, user_id: str = Depends(require_user)):
    if not ObjectId.is_valid(id):
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Invalid id: {id}")
    updated_report = Report.find_one_and_update(
        {'_id': ObjectId(id)}, {'$set': payload.dict(exclude_none=True)}, return_document=ReturnDocument.AFTER)
    if not updated_report:
        raise HTTPException(status_code=status.HTTP_200_OK,
                            detail=f'No Report with this id: {id} found')
    return reportEntity(updated_report)



@router.get('/{id}')
def get_report(id: str, user_id: str = Depends(require_user)):
    if not ObjectId.is_valid(id):
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Invalid id: {id}")
    pipeline = [
        {'$match': {'_id': ObjectId(id)}},
        {'$lookup': {'from': 'users', 'localField': 'user',
                     'foreignField': '_id', 'as': 'user'}},
        {'$unwind': '$user'},
    ]
    report = reportListEntity(Report.aggregate(pipeline))[0]
    if not report:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"No Report with this id: {id} found")
    return report


@router.delete('/{id}')
def delete_report(id: str, user_id: str = Depends(require_user)):
    if not ObjectId.is_valid(id):
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f"Invalid id: {id}")
    report = Report.find_one_and_delete({'_id': ObjectId(id)})
    if not report:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'No Report with this id: {id} found')
    return Response(status_code=status.HTTP_204_NO_CONTENT)
